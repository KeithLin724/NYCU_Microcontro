C51 COMPILER V8.16   MAIN                                                                  01/06/2022 00:55:32 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE code\main.c OPTIMIZE(0,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\main.lst) O
                    -BJECT(main.obj)

line level    source

   1          #include <REG_MPC82G516.H>
   2          #include "package.h"
   3          #include <STDIO.H>
   4          #include <STRING.H>
   5          #include <STDLIB.H>
   6          
   7          #define num_to_chr_f '0'
   8          #define MAX_MARK_STR 16
   9          /////////player/////
  10          ///////////////////
  11          #define pos_ply_max 16 // play is in 0 
  12          
  13          s_int8 game_win_lose = -1; // 0 is lose // 1 is win // -1 unknow 
  14          Byte game_state = 255; // 0 is new game // 1 is gameing // 2 is win_lose 
  15          Byte blood = 5;// only 5 time 
  16          //s_int8 player_num = 0;
  17          
  18          ///////game string//////////
  19          const char win_str[] = { '-','-','W' , 'I' , 'N' , '-' , '-' , '\0' };
  20          const char Lose_str[] = { '-','-','L' , 'O' , 'S' , 'E' , '-' , '-' , '\0' };
  21          const char mark_str[] = { 'm', 'a', 'r', 'k', ':' , '\0' };
  22          const char new_game[] = { 'n', 'e', 'w', ' ', 'g', 'a', 'm', 'e'  , '\0' };
  23          //////mark//////
  24          signed short mark = 0;
  25          char num_str_for_fun[MAX_MARK_STR];
  26          
  27          void to_mark_str() {
  28   1          Byte i;
  29   1          for (i = 0; i < MAX_MARK_STR; i++) {
  30   2              num_str_for_fun[i] = '\0';
  31   2          }
  32   1          sprintf(num_str_for_fun, "%d", mark);
  33   1      
  34   1      }
  35          ////////////////
  36          ////////sys num rand //////
  37          s_int8 sys_rand_num = 0;
  38          ///////
  39          //////input ///////////
  40          //Byte LCD_row = 0;
  41          Byte clean = 0;
  42          
  43          void int0_inter_input() interrupt 0 using 2{
  44   1          //LCD_row = !LCD_row;
  45   1          game_state++;
  46   1          if (game_state == 3) {
  47   2              game_state = 0;
  48   2          }
  49   1      
  50   1          clean = 1;
  51   1      }
  52          ///////////////////////
  53          void main() {
  54   1          // open INT0
C51 COMPILER V8.16   MAIN                                                                  01/06/2022 00:55:32 PAGE 2   

  55   1          IT0 = 1; /// falling edge 
  56   1          EX0 = 1;
  57   1          PX0 = 1;
  58   1          EA = 1;
  59   1          // 
  60   1      
  61   1      
  62   1          //LCD
  63   1          LCDInit();
  64   1      
  65   1      
  66   1          while (1) { // run main 
  67   2              /* code */
  68   2              LCDSetUpCmd(0x80); // set ddram to 0x80 is 0 0xC0
  69   2      
  70   2      
  71   2              switch (game_state) {
  72   3              case 0:
  73   3                  LCD_upload_str(new_game);
  74   3                  break;
  75   3              case 1:
  76   3                  LCD_upload_str(win_str);
  77   3      
  78   3                  LCDSetUpCmd(0xC0);
  79   3      
  80   3                  //
  81   3                  mark = rand() % 10;
  82   3                  to_mark_str();
  83   3                  //
  84   3                  LCD_upload_str(mark_str);
  85   3                  LCD_upload_str(num_str_for_fun);
  86   3                  break;
  87   3              case 2:
  88   3                  LCD_upload_str(Lose_str);
  89   3                  break;
  90   3      
  91   3              default:
  92   3                  break;
  93   3              }
  94   2      
  95   2      
  96   2      
  97   2              if (clean) {
  98   3                  LCDSetUpCmd(0x01);
  99   3                  clean = 0;
 100   3              }
 101   2              /*for (i = 0; i < 3; i++) {
 102   2                  P2 = new_game[i];
 103   2                  DelayMs(20000);
 104   2              }*/
 105   2      
 106   2      
 107   2          }
 108   1      
 109   1      
 110   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    407    ----
   CONSTANT SIZE    =      3    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V8.16   MAIN                                                                  01/06/2022 00:55:32 PAGE 3   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =     65    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
